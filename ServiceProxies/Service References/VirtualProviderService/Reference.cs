//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceProxies.VirtualProviderService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VirtualNodeStateInfo", Namespace="http://schemas.datacontract.org/2004/07/MITP")]
    [System.SerializableAttribute()]
    public partial class VirtualNodeStateInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstanceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MITP.VirtualNodeState StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageId {
            get {
                return this.ImageIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageIdField, value) != true)) {
                    this.ImageIdField = value;
                    this.RaisePropertyChanged("ImageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstanceId {
            get {
                return this.InstanceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.InstanceIdField, value) != true)) {
                    this.InstanceIdField = value;
                    this.RaisePropertyChanged("InstanceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MITP.VirtualNodeState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="VirtualProviderService.IVirtualProviderService")]
    public interface IVirtualProviderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVirtualProviderService/GetVirtualNodesState", ReplyAction="http://tempuri.org/IVirtualProviderService/GetVirtualNodesStateResponse")]
        System.Collections.Generic.Dictionary<string, ServiceProxies.VirtualProviderService.VirtualNodeStateInfo> GetVirtualNodesState(MITP.VirtualPool pool);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVirtualProviderService/StartInstance", ReplyAction="http://tempuri.org/IVirtualProviderService/StartInstanceResponse")]
        void StartInstance(MITP.VirtualPool pool, string instanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVirtualProviderService/StopInstance", ReplyAction="http://tempuri.org/IVirtualProviderService/StopInstanceResponse")]
        void StopInstance(MITP.VirtualPool pool, string instanceId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IVirtualProviderServiceChannel : ServiceProxies.VirtualProviderService.IVirtualProviderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VirtualProviderServiceClient : System.ServiceModel.ClientBase<ServiceProxies.VirtualProviderService.IVirtualProviderService>, ServiceProxies.VirtualProviderService.IVirtualProviderService {
        
        public VirtualProviderServiceClient() {
        }
        
        public VirtualProviderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public VirtualProviderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VirtualProviderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VirtualProviderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.Dictionary<string, ServiceProxies.VirtualProviderService.VirtualNodeStateInfo> GetVirtualNodesState(MITP.VirtualPool pool) {
            return base.Channel.GetVirtualNodesState(pool);
        }
        
        public void StartInstance(MITP.VirtualPool pool, string instanceId) {
            base.Channel.StartInstance(pool, instanceId);
        }
        
        public void StopInstance(MITP.VirtualPool pool, string instanceId) {
            base.Channel.StopInstance(pool, instanceId);
        }
    }
}
